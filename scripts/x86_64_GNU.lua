-- x86-64 GNU/Linux

function init()
   writeLine("/*")
   writeLine(" * Assembly code generated by bfc")
   writeLine(" * Compile using gcc -nostartfiles filename.s")
   writeLine(" */")
   writeLine("")
   writeLine(".text")
   writeLine("  .global _start")
   writeLine("  .type _start, @function")
   writeLine("_start:")
end

function na()
end

codeCounter = 0
frameSize = 0
-- r12: current pointer
-- r13: base pointer
function receiveCode(opCode, param)
   codeCounter = codeCounter + 1
   writeLine(".Lcode" .. codeCounter .. ":")
   if opCode == Opcodes.Nop then
      writeLine("  nop")
   elseif opCode == Opcodes.Add then
      writeLine("  addb $" .. param .. ", (%r12)")
   elseif opCode == Opcodes.Next then
      writeLine("  add $" .. param .. ", %r12")
   elseif opCode == Opcodes.Bz then
      writeLine("  cmpb $0, (%r12)")
      writeLine("  je .Lcode" .. (codeCounter + param))
   elseif opCode == Opcodes.B then
      writeLine("  jmp .Lcode" .. (codeCounter + param))
   elseif opCode == Opcodes.In then
      writeLine("  mov $0, %rax")
      writeLine("  mov $0, %rdi")
      writeLine("  mov %r12, %rsi")
      writeLine("  mov $1, %rdx")
      writeLine("  syscall")
   elseif opCode == Opcodes.Out then
      writeLine("  mov $1, %rax")
      writeLine("  mov $1, %rdi")
      writeLine("  mov %r12, %rsi")
      writeLine("  mov $1, %rdx")
      writeLine("  syscall")
   elseif opCode == Opcodes.Init then
      writeLine("  sub $" .. (param + 8) .. ", %rsp")
      frameSize = param
      writeLine("  mov %rsp, %r12")
      writeLine("  mov %rsp, %r13")
      writeLine("  add $8, %r12")
      writeLine("  movq $" .. frameSize .. ", (%r13)")

      writeLine("  mov %r12, %rax")
      writeLine("  mov $" .. frameSize .. ", %rcx")
      writeLine(".Li" .. codeCounter .. ":")
      writeLine("  movb $0, (%rax)")
      writeLine("  sub $1, %rcx")
      writeLine("  add $1, %rax")
      writeLine("  cmpq $0, %rcx")
      writeLine("  jnz .Li" .. codeCounter)
   elseif opCode == Opcodes.Dumpstat then
      writeLine("  mov $1, %rax")
      writeLine("  mov $2, %rdi")
      writeLine("  mov %r13, %rsi")
      writeLine("  mov $" .. frameSize + 8 .. ", %rdx")
      writeLine("  syscall")
   end
end

function atEnd()
   writeLine(".Lcode" .. codeCounter + 1 .. ":")
   writeLine("  add $" .. frameSize + 8 .. ", %rsp")
   writeLine("  mov $60, %rax")
   writeLine("  mov $0, %rdi")
   writeLine("  syscall")
end
